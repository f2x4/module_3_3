# Задача "Распаковка":
# 1.Функция с параметрами по умолчанию:
# Создайте функцию print_params(a = 1, b = 'строка', c = True), которая
# принимает три параметра со значениями по умолчанию
# (например сейчас это: 1, 'строка', True).
# Функция должна выводить эти параметры.
# Вызовите функцию print_params с разным количеством аргументов, включая вызов
# без аргументов.
# Проверьте, работают ли вызовы print_params(b = 25) print_params(c = [1,2,3])
# 2.Распаковка параметров:
# Создайте список values_list с тремя элементами разных типов.
# Создайте словарь values_dict с тремя ключами, соответствующими параметрам
# функции print_params, и значениями разных типов.
# Передайте values_list и values_dict в функцию print_params, используя
# распаковку параметров (* для списка и ** для словаря).
# 3.Распаковка + отдельные параметры:
# Создайте список values_list_2 с двумя элементами разных типов
# Проверьте, работает ли print_params(*values_list_2, 42)

def print_params(a = 1, b = 'строка', c = True):
    print(a, b, c)

# Вызов без аргументов работает
print_params()
# Вызов функции с различным числом и типом аргументов работает. PyCharm
# предупреждает о том, что переданы аргументы с типом отличным от того,
# что определены в функции по умолчанию.
print_params(b=25)
print_params(c = [1,2,3])
print_params(b='str', c=10.5 )
print_params(a={}, b='str', c=10.5)
print('---------')
values_list = [2.34, 14, 'some_value']
values_dict = {'a': 'text', 'b': True, 'c': 15}
print_params(*values_list) # на печать выводится распакованный список
print_params(**values_dict) # на печать выводится распакованный словарь
values_list_2 = [True, 'text']
# Вызов функции с такими параметрами сработает
print_params(*values_list_2, 42)
# Но лучше так
print_params(42, *values_list_2)